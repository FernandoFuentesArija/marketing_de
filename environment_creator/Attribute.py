

class Attribute:
    """ Base class to manage attributes

    The environment is composed of objects. These objects have characteristics that define them. Those characteristics
    we are going to call them attributes and they are going to be generated by this class.
    We are going to have 5 different types of atributes:
    1-NUMBER:
    2-TEXT:
    3-DATE:
    4-COMBINED:
    5-CONDITIONED:

    ATTRIBUTES
    ---------
    It's composed:
    - self.bbdd: Object that represents the connection to the bbdd
    - self.att_dic: Dictionary with the recipe to create the attribute
    - self.att_num: Number of attributes to create (inside a list)

    METHODS
    -------
    Podemos establecer

    PERSISTENCE
    ------------
    - El listado

    RELATIONS WITH OTHER ELEMENTS
    ------------------------------
    -[element name]: La
    """

    # Le pasamos una conexion a cada instancia (puede ser la misma)
    def __init__(self, ddbb_conn, att_dic, att_num):
        """ For every instance we need 3 parameters
        :param ddbb_conn: Object that represents the connection to the bbdd
        :param att_dic: Dictionary with the recipe to create the attribute
        :param att_num: Number of attributes to create (inside a list)
        """
        self.bbdd = ddbb_conn
        self.att_dic = att_dic
        self.att_num = att_num

    def create_numbers(self):
        """ This function creates a list of numbers
        The dictionary that will describe how to generate the list of numbers will have the following keys
        - 'PRECISION': Will describe the length of the integer part and the decimal part.
           Ej: if we want describe 9999.99  Ej_dic: 'PRECISION':'4-2'
        - 'RANGE': Establish the range (min-max) where the number are going to be created.
           Ej: if we want numbers between 10 and 100  Ej_dic: 'RANGE':'10-100'
        - 'GENERATION': It describes how the numbers are going to be created. The can be create randomly or as a
           secuence with certain hop.
           Ej_dic: 'GENERATION':'RANDOM' or 'GENERATION':'SEQUENTIAL'
        - 'HOP': In a sequential number generation is the separation between generated numbers.
           Ej: if we want 2,4,6,...  Ej_dic: 'HOP':'2'
        :return:
        """

